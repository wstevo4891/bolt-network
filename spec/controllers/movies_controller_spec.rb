require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MoviesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Movie. As you add validations to Movie, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for(:movie) }

  let(:invalid_attributes) { attributes_for(:movie, :invalid) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MoviesController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all movies as @movies" do
      movie = Movie.create! valid_attributes
      get :index #, {}, valid_session
      expect(assigns(:movies)).to eq([movie])
    end
  end

  describe "GET #show" do
    it "assigns the requested movie as @movie" do
      movie = Movie.create! valid_attributes
      get :show, {id: movie.to_param} #, valid_session
      expect(assigns(:movie)).to eq(movie)
    end
  end

  describe "GET #new" do
    it "assigns a new movie as @movie" do
      get :new, {} #, valid_session
      expect(assigns(:movie)).to be_a_new(Movie)
    end
  end

  describe "GET #edit" do
    it "assigns the requested movie as @movie" do
      movie = Movie.create! valid_attributes
      get :edit, {id: movie.to_param} #, valid_session
      expect(assigns(:movie)).to eq(movie)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      let(:post_create) { post :create, movie: valid_attributes } #, valid_session

      it "creates a new Movie" do
        expect {
          post_create
        }.to change(Movie, :count).by(1)
      end

      it "assigns a newly created movie as @movie" do
        post_create
        expect(assigns(:movie)).to be_a(Movie)
        expect(assigns(:movie)).to be_persisted
      end

      it "redirects to the movies list" do
        post_create
        expect(response).to redirect_to(admin_movies_index_url)
      end
    end

    context "with invalid params" do
      let(:post_invalid) { post :create, movie: invalid_attributes }

      it "does not save the new movie" do
        expect {
          post_invalid
        }.to_not change(Movie, :count)
      end

      it "assigns a newly created but unsaved movie as @movie" do
        post_invalid
        expect(assigns(:movie)).to be_a_new(Movie)
      end

      it "re-renders the 'new' template" do
        post_invalid
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    before(:each) do
      @movie = create(:movie, valid_attributes)
    end

    context "with valid params" do
      let(:new_attributes) { attributes_for(:movie, title: "Thor") }
      let(:put_update) { put :update, id: @movie, movie: new_attributes }

      it "updates the requested movie" do
        put_update
        @movie.reload
        expect(@movie.title).to eq("Thor")
      end

      it "assigns the requested movie as @movie" do
        put_update
        expect(assigns(:movie)).to eq(@movie)
      end

      it "redirects to the movie list" do
        put_update
        expect(response).to redirect_to(admin_movies_index_url)
      end
    end

    context "with invalid params" do
      let(:put_invalid) { put :update, id: @movie, movie: invalid_attributes }

      it "assigns the movie as @movie" do
        put_invalid
        expect(assigns(:movie)).to eq(@movie)
      end

      it "does not change the @movie's attributes" do
        put_invalid
        @movie.reload
        expect(@movie.title).to_not eq("Thor")
      end

      it "re-renders the 'edit' template" do
        put_invalid
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before(:each) do
      @movie = create(:movie)
    end

    let(:delete_movie) { delete :destroy, id: @movie }

    it "destroys the requested movie" do
      expect {
        delete_movie
      }.to change(Movie, :count).by(-1)
    end

    it "redirects to the movies list" do
      delete_movie
      expect(response).to redirect_to(admin_movies_index_url)
    end
  end
end
